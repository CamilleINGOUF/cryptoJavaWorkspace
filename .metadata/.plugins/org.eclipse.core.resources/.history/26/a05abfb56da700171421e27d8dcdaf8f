import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;

public class Vigenere 
{
	public static String vigenere(String key, String word)
	{
		String toReturn = new String();
		
		int indexKey = 0;
		for(int i = 0; i < word.length(); i++)
		{
			char tempChar = 'a';
			//C'est une lettre
			if(word.charAt(i) <= 'z' && word.charAt(i) >= 'a' || word.charAt(i) <= 'Z' && word.charAt(i) >= 'A')
			{
				//ça crypte 
				char letterWord = word.charAt(i);
				boolean isUpperCase = Character.isUpperCase(letterWord);
				int letterKey = key.charAt(indexKey%key.length());
				
				letterWord = Character.toLowerCase(letterWord);
				
				tempChar = (char)((((letterWord + letterKey)%97)%26)+97);
				
				if(isUpperCase)  
					tempChar = Character.toUpperCase(tempChar);
				
				indexKey++;
			}
			else//Ce n'est pas une lettre
			{
				tempChar = word.charAt(i);
			}
			toReturn += tempChar;
		}
		return toReturn;
	}
	
	public static String decrypt(String key, String word)
	{
		String toReturn = new String();
		int indexKey = 0;
		for(int i = 0; i < word.length(); i++)
		{
			char tempChar = 'a';
			//C'est une lettre
			if(word.charAt(i) <= 'z' && word.charAt(i) >= 'a' || word.charAt(i) <= 'Z' && word.charAt(i) >= 'A')
			{
				//ça décrypte 
				char letterWord = word.charAt(i);
				boolean isUpperCase = Character.isUpperCase(letterWord);
				int letterKey = key.charAt(indexKey%key.length());
				
				letterWord = Character.toLowerCase(letterWord);
				
				tempChar = (char)(((Math.floorMod((letterWord - letterKey), 26))%97)+97);
				
				if(isUpperCase)  
					tempChar = Character.toUpperCase(tempChar);
				
				indexKey++;
			}
			else
			{
				tempChar = word.charAt(i);
			}
			
			toReturn += tempChar;
		}
		return toReturn;
	}
	
	public static void main(String[] args) throws FileNotFoundException 
	{
		//java Vigenere -d/-c "key" "cryptedFile" "ClearFile"
		
		if(args.length != 4 )
		{
			System.err.println("[!] -c/-d key cryptedFile clearFile");
			System.exit(0);
		}
		
		System.out.println(args[0]);
		if(args[0].equals("-c"))
		{
			String content = new Scanner(new File(args[3])).useDelimiter("\\Z").next();
			String cryptedWord = vigenere(args[1],content);
			System.out.println(cryptedWord);
			try{
			    PrintWriter writer = new PrintWriter(args[2], "UTF-8");
			    writer.println(cryptedWord);
			    writer.close();
			} catch (IOException e) {
			   // do something
			}
		}
		else if(args[0].equals("-d"))
		{
			String content = new Scanner(new File(args[2])).useDelimiter("\\Z").next();
			String decryptedWord = decrypt(args[1],content);
			try{
			    PrintWriter writer = new PrintWriter(args[3], "UTF-8");
			    writer.println(decryptedWord);
			    writer.close();
			} catch (IOException e) {
			   // do something
			}
		}
	}
}
